#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test "$(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c)" != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
echo "Running git diff-index to check for whitespace errors"
git diff-index --check --cached "$against" --
GIT_DIFF_EXIT_CODE=$?

if [ $GIT_DIFF_EXIT_CODE -ne 0 ]
then
  echo "Whitespace errors found"
fi


# Added by Leigh 20220203

# Security audit dependencies
echo "Running bundle-audit..."
bundle exec bundle-audit --update
BUNDLE_AUDIT_EXIT_CODE=$?

# Security audit application code
echo "Running brakeman..."
bundle exec brakeman -q -w2
BRAKEMAN_EXIT_CODE=$?

# Lint Ruby files
echo "Running rubocop..."
bundle exec rubocop --parallel
RUBOCOP_EXIT_CODE=$?

if [ $RUBOCOP_EXIT_CODE -ne 0 ]
then
  echo "Rubocop errors found, attempting to autocorrect" 
  bundle exec rubocop --parallel -a
  bundle exec rubocop --only Style/FrozenStringLiteralComment -A
  bundle exec rubocop --only Layout/EmptyLineAfterMagicComment -A
  bundle exec rubocop --parallel
  RUBOCOP_EXIT_CODE=$?

  if [ $RUBOCOP_EXIT_CODE -ne 0 ]
  then
    echo "Couldn't autocorrect errors, please investigate and fix manually"
  else
    echo "Rubocop errors autocorrected"
  fi
fi

if [ $GIT_DIFF_EXIT_CODE -ne 0 ] || [ $BUNDLE_AUDIT_EXIT_CODE -ne 0 ] || [ $BRAKEMAN_EXIT_CODE -ne 0 ] || [ $RUBOCOP_EXIT_CODE -ne 0 ]
then
  echo "Errors found, refusing to commit"
  exit 1
else
  echo "Pre-commit checks passed, continuing with commit"
  exit 0
fi
